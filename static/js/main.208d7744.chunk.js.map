{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","props","className","href","title","Clock","state","date","Date","isDateVisible","toggleDate","bind","this","startTime","clearInterval","timer","setInterval","setState","prevState","dateOn","Component","Panel","id","type","checked","onChange","htmlFor","src","width","height","alt","Display","DateTime","toTimeString","toDateString","monthNames","dayNames","formatUnitOfTime","getHours","getMinutes","getSeconds","getDay","getUTCDate","getMonth","getFullYear","unitOfTime","dateTime","dayOfWeek","substring","dayOfMonth","month","year","hours","minutes","seconds","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAaMA,G,MAAS,SAACC,GACZ,OACI,yBAAKC,UAAU,qCACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,6BAA6BC,KAAK,KAAKF,EAAMG,YAO1EC,E,kDAEF,aAAe,IAAD,8BACV,gBAEKC,MAAQ,CACTC,KAAM,IAAIC,KACVC,eAAe,GAGnB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBARR,E,gEAYVC,KAAKC,c,6CAILC,cAAcF,KAAKG,S,kCAGV,IAAD,OACRH,KAAKG,MAAQC,aAAY,WACrB,EAAKC,UAAS,iBAAO,CAAEV,KAAM,IAAIC,WAClC,O,mCAIHI,KAAKK,UAAS,SAACC,GAAD,MAAgB,CAAET,eAAgBS,EAAUT,oB,+BAI1D,OACI,6BACI,kBAAC,EAAD,CAAOC,WAAYE,KAAKF,WAAYS,OAAQP,KAAKN,MAAMG,gBACvD,kBAAC,EAAD,CAASF,KAAMK,KAAKN,MAAMC,KAAME,cAAeG,KAAKN,MAAMG,qB,GAnCtDW,aAyCdC,EAAQ,SAACpB,GACX,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,SACX,2BAAOoB,GAAG,cAAcpB,UAAU,UAC9B,2BAAOqB,KAAK,WAAWC,QAASvB,EAAMkB,OAAQM,SAAUxB,EAAMS,aAC9D,0BAAMR,UAAU,kBAEpB,2BAAOA,UAAU,oBAAoBwB,QAAQ,eACzC,yBAAKC,IAAI,8EAA8EC,MAAM,KAAKC,OAAO,KAAK3B,UAAU,eAAe4B,IAAI,WASjKC,EAAU,SAAC9B,GAAD,OACZ,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,gBAAgB8B,EAASC,aAAahC,EAAMM,OACzDN,EAAMQ,eAAiB,yBAAKP,UAAU,gBAAgB8B,EAASE,aAAajC,EAAMM,YAOlGyB,E,WAEF,WAAYzB,GAAO,oBACfK,KAAKL,KAAOA,GAAc,IAAIC,KAE9BI,KAAKuB,WAAa,CACd,UAAW,WAAY,QACvB,QAAS,MAAO,OAChB,OAAQ,SAAU,YAClB,UAAW,WAAY,YAG3BvB,KAAKwB,SAAW,CACZ,SAAU,SAAU,UAAW,YAC/B,WAAY,SAAU,Y,oDAK1B,OAAOxB,KAAKyB,iBAAiBzB,KAAKL,KAAK+B,c,gCAIvC,OAAO1B,KAAKyB,iBAAiBzB,KAAKL,KAAKgC,gB,gCAIvC,OAAO3B,KAAKyB,iBAAiBzB,KAAKL,KAAKiC,gB,kCAIvC,OAAO5B,KAAKwB,SAASxB,KAAKL,KAAKkC,Y,mCAI/B,OAAO7B,KAAKyB,iBAAiBzB,KAAKL,KAAKmC,gB,8BAIvC,OAAO9B,KAAKuB,WAAWvB,KAAKL,KAAKoC,c,6BAIjC,MAAM,GAAN,OAAU/B,KAAKL,KAAKqC,iB,uCAGPC,GACb,OAAOA,EAAa,GAAb,WAAsBA,GAAtB,UAAwCA,M,oCAG/BtC,GAChB,IAAIuC,EAAW,IAAId,EAASzB,GAE5B,MAAM,GAAN,OAAUuC,EAASC,YAAYC,UAAU,EAAG,GAA5C,YAAkDF,EAASG,aAA3D,YAA2EH,EAASI,QAApF,YAA+FJ,EAASK,U,mCAGxF5C,GAChB,IAAIuC,EAAW,IAAId,EAASzB,GAE5B,MAAM,GAAN,OAAUuC,EAASM,QAAnB,YAA8BN,EAASO,UAAvC,YAAoDP,EAASQ,e,KAIrEvB,EAAQwB,aAAe,CACnBhD,KAAM,IAAIC,KACVC,eAAe,GAQnBY,EAAMkC,aAAe,CACjBpC,QAAQ,EACRT,WAAY,cAQhBV,EAAOuD,aAAe,CAClBnD,MAAO,SAOIoD,MA1LH,WACR,OACI,6BACI,kBAAC,EAAD,CAAQpD,MAAM,wBACd,kBAAC,EAAD,QCIQqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.208d7744.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './App.css'\n\nconst App = () => {\n    return (\n        <div>\n            <Header title=\"Real time clock app\" />\n            <Clock />\n        </div>\n    )\n}\n\nconst Header = (props) => {\n    return (\n        <nav className=\"header navbar navbar-dark bg-dark\">\n            <div className=\"container\">\n                <div className=\"row m-auto\">\n                    <div className=\"h1 ml-3 my-auto text-light\" href=\"/\">{props.title}</div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nclass Clock extends Component {\n\n    constructor() {\n        super();\n        \n        this.state = {\n            date: new Date(),\n            isDateVisible: true\n        };\n        \n        this.toggleDate = this.toggleDate.bind(this);\n    }\n\n    componentDidMount() {\n        this.startTime();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n    startTime() {        \n        this.timer = setInterval(() => {\n            this.setState(() => ({ date: new Date()}));\n        }, 1000);\n    }   \n    \n    toggleDate() {\n        this.setState((prevState) => ({ isDateVisible: !prevState.isDateVisible}));\n    }\n\n    render() {\n        return (\n            <div>\n                <Panel toggleDate={this.toggleDate} dateOn={this.state.isDateVisible} />\n                <Display date={this.state.date} isDateVisible={this.state.isDateVisible} />\n            </div>\n        );\n    }\n}\n\nconst Panel = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"d-flex flex-row\">\n                <div className=\"col-md-4 mx-auto\">\n                    <div className=\"panel\">                        \n                        <label id=\"date-switch\" className=\"switch\">\n                            <input type=\"checkbox\" checked={props.dateOn} onChange={props.toggleDate}/>\n                            <span className=\"slider round\"></span>\n                        </label>\n                        <label className=\"panel-switch-text\" htmlFor=\"date-switch\">\n                            <img src=\"https://cdn0.iconfinder.com/data/icons/e-commerce-207/1024/calendar-512.png\" width=\"50\" height=\"50\" className=\"card-img-top\" alt=\"\"/>\n                        </label>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst Display = (props) => (\n    <div className=\"container-fluid\">\n        <div className=\"d-flex flex-row\">\n            <div className=\"col-md-4 mx-auto\">\n                <div className=\"display\">\n                    <div className=\"display-time\">{DateTime.toTimeString(props.date)}</div>\n                    { props.isDateVisible && <div className=\"display-date\">{DateTime.toDateString(props.date)}</div> }\n                </div>\n            </div>\n        </div>\n    </div>\n)\n\nclass DateTime {\n\n    constructor(date) {\n        this.date = date ? date : new Date();\n\n        this.monthNames = [\n            'January', 'February', 'March',\n            'April', 'May', 'June',\n            'July', 'August', 'September',\n            'October', 'November', 'December'\n        ];\n    \n        this.dayNames = [\n            'Sunday', 'Monday', 'Tuesday', 'Wednesday',\n            'Thursday', 'Friday', 'Saturday'\n        ];\n    }\n\n    hours() {\n        return this.formatUnitOfTime(this.date.getHours());\n    }\n\n    minutes() {\n        return this.formatUnitOfTime(this.date.getMinutes());\n    }\n\n    seconds() {\n        return this.formatUnitOfTime(this.date.getSeconds());\n    }\n\n    dayOfWeek() {\n        return this.dayNames[this.date.getDay()];\n    }\n\n    dayOfMonth() {\n        return this.formatUnitOfTime(this.date.getUTCDate());\n    }\n\n    month() {\n        return this.monthNames[this.date.getMonth()];\n    }\n\n    year() {\n        return `${this.date.getFullYear()}`;\n    }\n\n    formatUnitOfTime(unitOfTime) {\n        return unitOfTime < 10 ? `0${unitOfTime}` : `${unitOfTime}`;\n    }\n\n    static toDateString(date) {\n        var dateTime = new DateTime(date);\n\n        return `${dateTime.dayOfWeek().substring(0, 3)} ${dateTime.dayOfMonth()} ${dateTime.month()} ${dateTime.year()}`;\n    }\n\n    static toTimeString(date) {\n        var dateTime = new DateTime(date);\n\n        return `${dateTime.hours()}:${dateTime.minutes()}:${dateTime.seconds()}`;\n    }\n}\n\nDisplay.defaultProps = {\n    date: new Date(),\n    isDateVisible: true\n}\n\nDisplay.propTypes = {\n    date: PropTypes.object,\n    isDateVisible: PropTypes.bool\n}\n\nPanel.defaultProps = {\n    dateOn: true,\n    toggleDate: () => {},\n}\n\nPanel.propTypes = {\n    dateOn: PropTypes.bool,\n    toggleDate: PropTypes.func\n}\n\nHeader.defaultProps = {\n    title: 'Title'\n}\n\nHeader.propTypes = {\n    title: PropTypes.string\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'))\nserviceWorker.unregister()\n"],"sourceRoot":""}